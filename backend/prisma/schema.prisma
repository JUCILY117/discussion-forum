// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//models
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  threads   Thread[]
  replies   Reply[]
  votes     Vote[]
}

model Thread {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  replies     Reply[]
  votes       Vote[]
}

model Reply {
  id            Int      @id @default(autoincrement())
  content       String
  authorId      Int
  author        User     @relation(fields: [authorId], references: [id])
  threadId      Int
  thread        Thread   @relation(fields: [threadId], references: [id])
  parentReplyId Int?
  parentReply   Reply?   @relation("ParentReply", fields: [parentReplyId], references: [id])
  childReplies  Reply[]  @relation("ParentReply")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  votes         Vote[]
}

model Vote {
  id        Int    @id @default(autoincrement())
  userId    Int
  threadId  Int?
  replyId   Int?
  value     Int

  user      User   @relation(fields: [userId], references: [id])
  thread    Thread? @relation(fields: [threadId], references: [id])
  reply     Reply?  @relation(fields: [replyId], references: [id])

  @@unique([userId, threadId], map: "user_thread_unique")
  @@unique([userId, replyId], map: "user_reply_unique")
}